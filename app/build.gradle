apply plugin: 'com.android.application'
apply from: '../config/quality/quality.gradle'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    def versionPropsFile = file('version.properties')
    def versionBuild

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['AI_VERSION_CODE'].toInteger()
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    defaultConfig {
        applicationId "me.bitfrom.whattowatch"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versionBuild
        versionName "1.0."  + versionCode
        multiDexEnabled true

        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        maxProcessCount 4
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        //noinspection GroovyMissingReturnStatement
        release {
//            def Properties rProps = loadSigningProperties('release_signing.properties')
//            storeFile = file(rProps['STORE_FILE'])
//            storePassword = rProps['STORE_PASSWORD']
//            keyAlias = rProps['KEY_ALIAS']
//            keyPassword = rProps['KEY_PASSWORD']
        }

        debug {
//            def Properties dProps = loadSigningProperties('debug_signing.properties')
//            storeFile = file(dProps['STORE_FILE'])
//            storePassword = dProps['STORE_PASSWORD']
//            keyAlias = dProps['KEY_ALIAS']
//            keyPassword = dProps['KEY_PASSWORD']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
            //buildConfigField "String", "API_TOKEN", loadApiKey('api_key.properties')
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            versionNameSuffix ".dev"
            buildConfigField "String", "API_TOKEN", loadApiKey('debug_api_key.properties')
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    //noinspection GroovyMissingReturnStatement
    lintOptions {
        warningsAsErrors true
        abortOnError false

        disable 'GoogleAppIndexingWarning' // App does not have deep linking.
        disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK.
    }

    //noinspection GroovyMissingReturnStatement
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    configurations.all {
        resolutionStrategy.force libraries.supportAnnotations
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile libraries.supportAnnotations
    compile libraries.supportAppCompat
    compile libraries.supportV4
    compile libraries.supportDesign
    compile libraries.supportRecyclerView
    compile libraries.supportCardView
    compile libraries.supportGridLayout
    compile libraries.multidex

    apt libraries.javaPoet
    compile libraries.dagger
    compile libraries.javaxInject
    compile libraries.javaxAnnotationApi
    apt libraries.daggerCompiler

    compile libraries.rxJava
    compile libraries.rxAndroid

    compile libraries.okHttp
    compile libraries.okHttpLoggingInterceptor
    compile libraries.retrofit
    compile libraries.retrofitRxJavaAdapter
    apt libraries.loganSquareApt
    compile libraries.loganSquare
    compile libraries.loganSquareConverter
    compile libraries.androidJob

    // Do not compile AutoValue dependencies to the app.
    apt libraries.autoValueParcel
    //compile libraries.autoValueParcelTA
    // Make AutoValue annotation visible to the compiler.
    provided libraries.autoValueParcel

    compile libraries.sqlBrite

    compile libraries.universalImageLoader

    compile libraries.butterKnife
    apt libraries.butterKnifeCompiler
    compile libraries.appIntro
    compile libraries.getBaseFAB

    compile libraries.eventBus
    compile libraries.streams

    compile libraries.stetho
    compile libraries.stethoOkHttp
    debugCompile libraries.leakCanaryDebug
    releaseCompile libraries.leakCanaryRelease
    testCompile  libraries.leakCanaryTests
    compile libraries.tinyDancer
    compile libraries.timber

    compile (libraries.crashlystics) {
        transitive = true;
    }

    testCompile libraries.junit
    testCompile libraries.roboelectric
    testCompile libraries.mockito
    testCompile libraries.hamcrest
    testCompile libraries.powerMockJUnit
    testCompile libraries.powerMockMockito
    testCompile libraries.assertJ
    androidTestCompile libraries.testRunner
    androidTestCompile libraries.testRules
    androidTestCompile libraries.espressoCore
    androidTestCompile (libraries.espressoContrib) {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile libraries.espressoIntents
    androidTestCompile libraries.espressoIdling
}

def String loadApiKey(String apiKeyFileName) {
    def apiKeyPropsFile = file(apiKeyFileName)
    if (apiKeyPropsFile.canRead()) {
        def Properties apiKeyProps = new Properties()
        apiKeyProps.load(new FileInputStream(apiKeyPropsFile))

        if (apiKeyProps != null && apiKeyProps.containsKey('API_KEY')) {
            return apiKeyProps['API_KEY']
        } else {
            throw new GradleException(apiKeyFileName + " found but cant read API_TOKEN")
        }
    } else {
        throw new GradleException(apiKeyFileName + " not found. Please, provide your own " +
                "api key from the www.myapifilms.com")
    }
}

def Properties loadSigningProperties(String propertyFileName) {
    def Properties rProps = new Properties()
    def rpFile = file(propertyFileName)
    if (rpFile.canRead()){
        rProps.load(new FileInputStream(rpFile))

        if (rProps != null && rProps.containsKey('STORE_FILE') && rProps.containsKey('STORE_PASSWORD') &&
                rProps.containsKey('KEY_ALIAS') && rProps.containsKey('KEY_PASSWORD')) {
            return rProps;
        } else {
            throw new GradleException(propertyFileName + " found but some entries are missing")
        }
    } else {
        throw new GradleException(propertyFileName + " not found")
    }
}