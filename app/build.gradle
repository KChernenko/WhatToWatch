apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        def version = versionProps['VERSION_NAME']
        versionProps['VERSION_CODE']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "me.bitfrom.whattowatch"
            minSdkVersion 16
            targetSdkVersion 23
            versionCode code
            versionName version.toString() + "." + code.toString()

            def apiKeyPropsFile = file('api_key.properties')
            if (apiKeyPropsFile.canRead()) {
                def Properties apiKeyProps = new Properties()
                apiKeyProps.load(new FileInputStream(apiKeyPropsFile))

                if (apiKeyProps != null && apiKeyProps.containsKey('API_KEY')) {
                    buildConfigField "String", "API_TOKEN", apiKeyProps['API_KEY']
                } else {
                    throw new GradleException("api_key.properties found but cant read API_TOKEN")
                }
            } else {
                throw new GradleException("api_key.properties not found. Please, provide your own " +
                        "api key from the www.myapifilms.com")
            }
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release {
            def Properties rProps = new Properties()
            def rpFile = file('release_signing.properties')
            if (rpFile.canRead()){
                rProps.load(new FileInputStream(rpFile))

                if (rProps!=null && rProps.containsKey('STORE_FILE') && rProps.containsKey('STORE_PASSWORD') &&
                        rProps.containsKey('KEY_ALIAS') && rProps.containsKey('KEY_PASSWORD')) {
                    storeFile = file(rProps['STORE_FILE'])
                    storePassword = rProps['STORE_PASSWORD']
                    keyAlias = rProps['KEY_ALIAS']
                    keyPassword = rProps['KEY_PASSWORD']
                } else {
                    throw new GradleException("release_signing.properties found but some entries are missing")
                }
            }else {
                throw new GradleException("release_signing.properties not found")
            }
        }

        debug {
            def Properties dProps = new Properties()
            def dpFile = file('debug_signing.properties')
            if (dpFile.canRead()){
                dProps.load(new FileInputStream(dpFile))

                if (dProps!=null && dProps.containsKey('STORE_FILE') && dProps.containsKey('STORE_PASSWORD') &&
                        dProps.containsKey('KEY_ALIAS') && dProps.containsKey('KEY_PASSWORD')) {
                    storeFile = file(dProps['STORE_FILE'])
                    storePassword = dProps['STORE_PASSWORD']
                    keyAlias = dProps['KEY_ALIAS']
                    keyPassword = dProps['KEY_PASSWORD']
                } else {
                    throw new GradleException("debug_signing.properties found but some entries are missing")
                }
            }else {
                throw new GradleException("debug_signing.properties not found")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            versionNameSuffix ".debug"
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    final SUPPORT_LIBRARY_VERSION = '23.2.0'
    final JUNIT_VERSION = "4.12"

    final DAGGER_VERSION = "2.0.2"
    final DAGGER_ANNOTATION_VERSION = "10.0-b28"

    final RX_JAVA_VERSION = "1.1.1"
    final RX_ANDROID_VERSION = "1.1.0"
    final RX_PG_VERSION = "1.1.1.0"

    final RETROFIT_VERSION = "2.0.0"
    final OKHTTP_VERSION = "3.2.0"
    final GSON_VERSION = "2.6.1"

    final SQLBRITE_VERSION = "0.6.2"

    final BUTTERKNIFE_VERSION = "8.0.0-SNAPSHOT"

    final TIMBER_VERSION = "4.1.1"

    final AUIL_VERSION = "1.9.5";

    final LEAK_CANARY_VERSION = "1.4-beta1"
    final FABRIC_CRASH_LIST_VERSION = "2.5.5@aar"
    final STETHO_VERSION = "1.3.1"

    final RIPPLE_EFFECT_VERSION = "1.3"
    final GETBASE_FAB_VERSION = "1.10.1"
    final APP_INTRO_VERSION = "3.4.0";

    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile "junit:junit:$JUNIT_VERSION"
    compile "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:gridlayout-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"

    //Fabric
    compile("com.crashlytics.sdk.android:crashlytics:$FABRIC_CRASH_LIST_VERSION") {
        transitive = true;
    }
    //Required by Dagger2
    def daggerCompiler = "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    compile "com.google.dagger:dagger:$DAGGER_VERSION"
    provided "org.glassfish:javax.annotation:$DAGGER_ANNOTATION_VERSION"
    //Rx
    compile "io.reactivex:rxjava:$RX_JAVA_VERSION"
    compile "io.reactivex:rxandroid:$RX_ANDROID_VERSION"
    compile "com.artemzin.rxjava:proguard-rules:$RX_PG_VERSION"
    //Database
    compile "com.squareup.sqlbrite:sqlbrite:$SQLBRITE_VERSION"
    //OkHttp
    compile "com.squareup.okhttp3:okhttp:$OKHTTP_VERSION"
    compile ("com.squareup.okhttp3:logging-interceptor:$OKHTTP_VERSION") {
        exclude module: 'okhttp'
    }
    //Gson
    compile "com.google.code.gson:gson:$GSON_VERSION"
    //Retrofit
    compile ("com.squareup.retrofit2:retrofit:$RETROFIT_VERSION") {
        exclude module: 'okhttp'
    }
    compile ("com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION") {
        exclude module: 'retrofit'
    }
    compile ("com.squareup.retrofit2:adapter-rxjava:$RETROFIT_VERSION") {
        exclude module: 'retrofit'
    }
    //View injector
    compile "com.jakewharton:butterknife:$BUTTERKNIFE_VERSION"

    //Developer
    compile "com.jakewharton.timber:timber:$TIMBER_VERSION"
    debugCompile "com.squareup.leakcanary:leakcanary-android:$LEAK_CANARY_VERSION"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$LEAK_CANARY_VERSION"
    compile "com.facebook.stetho:stetho:$STETHO_VERSION"
    compile "com.facebook.stetho:stetho-okhttp3:$STETHO_VERSION"

    //Image-side
    compile "com.nostra13.universalimageloader:universal-image-loader:$AUIL_VERSION"

    //UI other
    compile "com.github.traex.rippleeffect:library:$RIPPLE_EFFECT_VERSION"
    compile "com.getbase:floatingactionbutton:$GETBASE_FAB_VERSION"
    compile "com.github.paolorotolo:appintro:$APP_INTRO_VERSION"

    // APT dependencies
    apt daggerCompiler
    apt "com.jakewharton:butterknife-compiler:$BUTTERKNIFE_VERSION"
}

// Log out test results to console
tasks.matching {it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

retrolambda {
    jvmArgs '-noverify'
}