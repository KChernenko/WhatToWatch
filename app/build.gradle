apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def code = versionProps['VERSION_CODE'].toInteger() + 1
        versionProps['VERSION_CODE']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "me.bitfrom.bashreader"
            minSdkVersion 16
            targetSdkVersion 23
            versionCode code
            versionName "0.1." + code
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release {
            def Properties rProps = new Properties()
            def rpFile = file('release_signing.properties')
            if (rpFile.canRead()){
                rProps.load(new FileInputStream(rpFile))

                if (rProps!=null && rProps.containsKey('STORE_FILE') && rProps.containsKey('STORE_PASSWORD') &&
                        rProps.containsKey('KEY_ALIAS') && rProps.containsKey('KEY_PASSWORD')) {
                    storeFile = file(rProps['STORE_FILE'])
                    storePassword = rProps['STORE_PASSWORD']
                    keyAlias = rProps['KEY_ALIAS']
                    keyPassword = rProps['KEY_PASSWORD']
                } else {
                    throw new GradleException("release_signing.properties found but some entries are missing")
                }
            }else {
                throw new GradleException("release_signing.properties not found")
            }
        }

        debug {
            def Properties dProps = new Properties()
            def dpFile = file('debug_signing.properties')
            if (dpFile.canRead()){
                dProps.load(new FileInputStream(dpFile))

                if (dProps!=null && dProps.containsKey('STORE_FILE') && dProps.containsKey('STORE_PASSWORD') &&
                        dProps.containsKey('KEY_ALIAS') && dProps.containsKey('KEY_PASSWORD')) {
                    storeFile = file(dProps['STORE_FILE'])
                    storePassword = dProps['STORE_PASSWORD']
                    keyAlias = dProps['KEY_ALIAS']
                    keyPassword = dProps['KEY_PASSWORD']
                } else {
                    throw new GradleException("debug_signing.properties found but some entries are missing")
                }
            }else {
                throw new GradleException("debug_signing.properties not found")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.betaDistributionReleaseNotesFilePath =
                    file('../crashlytics_release_notes.txt').absolutePath
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            versionNameSuffix ".debug"
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    final SUPPORT_LIBRARY_VERSION = '23.1.1'
    final DAGGER_VERSION = "2.0.2"
    final RX_VERSION = "1.1.0"
    final RETROFIT_VERSION = "2.0.0-beta2"
    final OKHTTP_VERSION = "2.7.0"
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:gridlayout-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    //Fabric
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    def daggerCompiler = "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    compile "com.google.dagger:dagger:$DAGGER_VERSION"
    provided 'org.glassfish:javax.annotation:10.0-b28'
    //Required by Dagger2
    compile "io.reactivex:rxjava:$RX_VERSION"
    //Square + Wharton
    compile "com.squareup.retrofit:retrofit:$RETROFIT_VERSION"
    compile "com.squareup.retrofit:converter-gson:$RETROFIT_VERSION"
    compile "com.squareup.retrofit:adapter-rxjava:$RETROFIT_VERSION"
    compile "io.reactivex:rxandroid:$RX_VERSION"
    compile "com.squareup.okhttp:okhttp:$OKHTTP_VERSION"
    compile "com.squareup.okhttp:logging-interceptor:$OKHTTP_VERSION"
    compile 'com.squareup.sqlbrite:sqlbrite:0.5.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.jakewharton.rxbinding:rxbinding:0.3.0'

    //Image-side
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'

    //UI other
    compile 'com.github.traex.rippleeffect:library:1.3'
    compile 'com.getbase:floatingactionbutton:1.10.1'
    compile 'com.cocosw:bottomsheet:1.+@aar'

    //Other libs
    compile 'de.greenrobot:eventbus:2.4.0'

    // APT dependencies
    apt daggerCompiler
}

// Log out test results to console
tasks.matching {it instanceof Test}.all {
    testLogging.events = ["failed", "passed", "skipped"]
}